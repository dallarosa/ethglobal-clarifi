/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AutoswapModule,
  AutoswapModuleInterface,
} from "../../../contracts/AutoswapModule.sol/AutoswapModule";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_uniswapRouter",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "safe",
        type: "address",
      },
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "desiredToken",
        type: "address",
      },
    ],
    name: "DesiredTokenSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "safe",
        type: "address",
      },
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "fromToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "destToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fromAmount",
        type: "uint256",
      },
    ],
    name: "ExecuteAutoswap",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "safe",
        type: "address",
      },
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "sourceToken",
        type: "address",
      },
    ],
    name: "SourceTokenSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "safe",
        type: "address",
      },
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "sourceToken",
        type: "address",
      },
    ],
    name: "SourceTokenUnset",
    type: "event",
  },
  {
    inputs: [],
    name: "NAME",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "desiredTokens",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract GnosisSafe",
        name: "safe",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "executeAutoswap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "safe",
        type: "address",
      },
    ],
    name: "getDesiredToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "desiredToken",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "setDesiredToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "setSourceToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    name: "sourceTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "uniswapRouter",
    outputs: [
      {
        internalType: "contract ISwapRouter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "unsetSourceToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620017a8380380620017a88339818101604052810190620000379190620000e9565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b18262000084565b9050919050565b620000c381620000a4565b8114620000cf57600080fd5b50565b600081519050620000e381620000b8565b92915050565b6000602082840312156200010257620001016200007f565b5b60006200011284828501620000d2565b91505092915050565b61167d806200012b6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a6a3245411610066578063a6a3245414610147578063b4b5267914610163578063e01df1ef14610193578063e0a31237146101af578063ffa1ad74146101df5761009e565b806322ee13c4146100a3578063735de9f7146100bf57806382a1ce1b146100dd57806383b731c5146100f9578063a3f4df7e14610129575b600080fd5b6100bd60048036038101906100b89190610d84565b6101fd565b005b6100c761087c565b6040516100d49190610e36565b60405180910390f35b6100f760048036038101906100f29190610e51565b6108a2565b005b610113600480360381019061010e9190610eaa565b610993565b6040516101209190610ef8565b60405180910390f35b6101316109c6565b60405161013e9190610fa3565b60405180910390f35b610161600480360381019061015c9190610e51565b6109ff565b005b61017d60048036038101906101789190610eaa565b610ad9565b60405161018a9190610ef8565b60405180910390f35b6101ad60048036038101906101a89190610e51565b610b41565b005b6101c960048036038101906101c49190610fc5565b610c33565b6040516101d69190611020565b60405180910390f35b6101e7610c62565b6040516101f49190610fa3565b60405180910390f35b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166102c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102bd906110ad565b60405180910390fd5b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038f90611119565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040516024016103cf929190611157565b6040516020818303038152906040527f095ea7b3000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508473ffffffffffffffffffffffffffffffffffffffff1663468721a78560008460006040518563ffffffff1660e01b815260040161048f9493929190611287565b6020604051808303816000875af11580156104ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d291906112ff565b610511576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050890611378565b60405180910390fd5b6000600267ffffffffffffffff81111561052e5761052d611398565b5b60405190808252806020026020018201604052801561055c5781602001602082028036833780820191505090505b5090508481600081518110610574576105736113c7565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082816001815181106105c3576105c26113c7565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060006040518061010001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff168152602001606462ffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff16815260200142815260200186815260200160018152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060006040518060800160405280605281526020016115f660529139826040516024016106c791906114e3565b604051602081830303815290604052906040516106e4919061153b565b60405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090508773ffffffffffffffffffffffffffffffffffffffff1663468721a7600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008460006040518563ffffffff1660e01b815260040161079e9493929190611287565b6020604051808303816000875af11580156107bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e191906112ff565b610820576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108179061159e565b60405180910390fd5b8773ffffffffffffffffffffffffffffffffffffffff167f2d5e3a37a9a962c11440321c8cb142ac20dbc688e40004cacf5bf3c5e73fa39388878960405161086a939291906115be565b60405180910390a25050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fb2344971edae5612fcccb4f2b0639cb708244e7f0b69ab5c159e7ee25d1f1b6b60405160405180910390a350565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6040518060400160405280600f81526020017f4175746f73776170204d6f64756c65000000000000000000000000000000000081525081565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fee962939df889c0a3806c2f157a7b9e546a5a02ce2b551f1607c94b210c4287360405160405180910390a350565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f09cbc5e8ab797524b32acfb6c80c4e45f29655934c44ccd73dd8d3f5af83ce7160405160405180910390a350565b60016020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6040518060400160405280600581526020017f302e312e3000000000000000000000000000000000000000000000000000000081525081565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ccb82610ca0565b9050919050565b6000610cdd82610cc0565b9050919050565b610ced81610cd2565b8114610cf857600080fd5b50565b600081359050610d0a81610ce4565b92915050565b6000610d1b82610cc0565b9050919050565b610d2b81610d10565b8114610d3657600080fd5b50565b600081359050610d4881610d22565b92915050565b6000819050919050565b610d6181610d4e565b8114610d6c57600080fd5b50565b600081359050610d7e81610d58565b92915050565b600080600060608486031215610d9d57610d9c610c9b565b5b6000610dab86828701610cfb565b9350506020610dbc86828701610d39565b9250506040610dcd86828701610d6f565b9150509250925092565b6000819050919050565b6000610dfc610df7610df284610ca0565b610dd7565b610ca0565b9050919050565b6000610e0e82610de1565b9050919050565b6000610e2082610e03565b9050919050565b610e3081610e15565b82525050565b6000602082019050610e4b6000830184610e27565b92915050565b600060208284031215610e6757610e66610c9b565b5b6000610e7584828501610d39565b91505092915050565b610e8781610cc0565b8114610e9257600080fd5b50565b600081359050610ea481610e7e565b92915050565b600060208284031215610ec057610ebf610c9b565b5b6000610ece84828501610e95565b91505092915050565b6000610ee282610e03565b9050919050565b610ef281610ed7565b82525050565b6000602082019050610f0d6000830184610ee9565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f4d578082015181840152602081019050610f32565b60008484015250505050565b6000601f19601f8301169050919050565b6000610f7582610f13565b610f7f8185610f1e565b9350610f8f818560208601610f2f565b610f9881610f59565b840191505092915050565b60006020820190508181036000830152610fbd8184610f6a565b905092915050565b60008060408385031215610fdc57610fdb610c9b565b5b6000610fea85828601610e95565b9250506020610ffb85828601610d39565b9150509250929050565b60008115159050919050565b61101a81611005565b82525050565b60006020820190506110356000830184611011565b92915050565b7f736f7572636520746f6b656e206973206e6f7420696e2074686520616c6c6f7760008201527f6c69737400000000000000000000000000000000000000000000000000000000602082015250565b6000611097602483610f1e565b91506110a28261103b565b604082019050919050565b600060208201905081810360008301526110c68161108a565b9050919050565b7f6465736972656420746f6b656e20686173206e6f74206265656e207365740000600082015250565b6000611103601e83610f1e565b915061110e826110cd565b602082019050919050565b60006020820190508181036000830152611132816110f6565b9050919050565b61114281610cc0565b82525050565b61115181610d4e565b82525050565b600060408201905061116c6000830185611139565b6111796020830184611148565b9392505050565b6000819050919050565b60006111a56111a061119b84611180565b610dd7565b610d4e565b9050919050565b6111b58161118a565b82525050565b600081519050919050565b600082825260208201905092915050565b60006111e2826111bb565b6111ec81856111c6565b93506111fc818560208601610f2f565b61120581610f59565b840191505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106112505761124f611210565b5b50565b60008190506112618261123f565b919050565b600061127182611253565b9050919050565b61128181611266565b82525050565b600060808201905061129c6000830187611139565b6112a960208301866111ac565b81810360408301526112bb81856111d7565b90506112ca6060830184611278565b95945050505050565b6112dc81611005565b81146112e757600080fd5b50565b6000815190506112f9816112d3565b92915050565b60006020828403121561131557611314610c9b565b5b6000611323848285016112ea565b91505092915050565b7f436f756c64206e6f7420617070726f7665000000000000000000000000000000600082015250565b6000611362601183610f1e565b915061136d8261132c565b602082019050919050565b6000602082019050818103600083015261139181611355565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6113ff81610cc0565b82525050565b600062ffffff82169050919050565b61141d81611405565b82525050565b61142c81610d4e565b82525050565b61143b81610ca0565b82525050565b6101008201600082015161145860008501826113f6565b50602082015161146b60208501826113f6565b50604082015161147e6040850182611414565b50606082015161149160608501826113f6565b5060808201516114a46080850182611423565b5060a08201516114b760a0850182611423565b5060c08201516114ca60c0850182611423565b5060e08201516114dd60e0850182611432565b50505050565b6000610100820190506114f96000830184611441565b92915050565b600081905092915050565b600061151582610f13565b61151f81856114ff565b935061152f818560208601610f2f565b80840191505092915050565b6000611547828461150a565b915081905092915050565b7f436f756c64206e6f742065786563757465207377617000000000000000000000600082015250565b6000611588601683610f1e565b915061159382611552565b602082019050919050565b600060208201905081810360008301526115b78161157b565b9050919050565b60006060820190506115d36000830186610ee9565b6115e06020830185610ee9565b6115ed6040830184611148565b94935050505056fe6578616374496e70757453696e676c652828616464726573732c616464726573732c75696e7432342c616464726573732c75696e743235362c75696e743235362c75696e743235362c75696e743136302929a264697066735822122053aa4337b5148d224717b5826c35f24292545be11e5166a02a0fafc65f3e2eb364736f6c63430008110033";

type AutoswapModuleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AutoswapModuleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AutoswapModule__factory extends ContractFactory {
  constructor(...args: AutoswapModuleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _uniswapRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AutoswapModule> {
    return super.deploy(
      _uniswapRouter,
      overrides || {}
    ) as Promise<AutoswapModule>;
  }
  override getDeployTransaction(
    _uniswapRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_uniswapRouter, overrides || {});
  }
  override attach(address: string): AutoswapModule {
    return super.attach(address) as AutoswapModule;
  }
  override connect(signer: Signer): AutoswapModule__factory {
    return super.connect(signer) as AutoswapModule__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AutoswapModuleInterface {
    return new utils.Interface(_abi) as AutoswapModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AutoswapModule {
    return new Contract(address, _abi, signerOrProvider) as AutoswapModule;
  }
}
