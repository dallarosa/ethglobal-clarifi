/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AutoswapModuleInterface extends utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "desiredTokens(address)": FunctionFragment;
    "executeAutoswap(address,address,uint256)": FunctionFragment;
    "getDesiredToken(address)": FunctionFragment;
    "setDesiredToken(address)": FunctionFragment;
    "setSourceToken(address)": FunctionFragment;
    "sourceTokens(address,address)": FunctionFragment;
    "uniswapRouter()": FunctionFragment;
    "unsetSourceToken(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NAME"
      | "VERSION"
      | "desiredTokens"
      | "executeAutoswap"
      | "getDesiredToken"
      | "setDesiredToken"
      | "setSourceToken"
      | "sourceTokens"
      | "uniswapRouter"
      | "unsetSourceToken"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "desiredTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAutoswap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDesiredToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDesiredToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSourceToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sourceTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unsetSourceToken",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "desiredTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAutoswap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDesiredToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDesiredToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSourceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sourceTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsetSourceToken",
    data: BytesLike
  ): Result;

  events: {
    "DesiredTokenSet(address,address)": EventFragment;
    "ExecuteAutoswap(address,address,address,uint256)": EventFragment;
    "SourceTokenSet(address,address)": EventFragment;
    "SourceTokenUnset(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DesiredTokenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteAutoswap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SourceTokenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SourceTokenUnset"): EventFragment;
}

export interface DesiredTokenSetEventObject {
  safe: string;
  desiredToken: string;
}
export type DesiredTokenSetEvent = TypedEvent<
  [string, string],
  DesiredTokenSetEventObject
>;

export type DesiredTokenSetEventFilter = TypedEventFilter<DesiredTokenSetEvent>;

export interface ExecuteAutoswapEventObject {
  safe: string;
  fromToken: string;
  destToken: string;
  fromAmount: BigNumber;
}
export type ExecuteAutoswapEvent = TypedEvent<
  [string, string, string, BigNumber],
  ExecuteAutoswapEventObject
>;

export type ExecuteAutoswapEventFilter = TypedEventFilter<ExecuteAutoswapEvent>;

export interface SourceTokenSetEventObject {
  safe: string;
  sourceToken: string;
}
export type SourceTokenSetEvent = TypedEvent<
  [string, string],
  SourceTokenSetEventObject
>;

export type SourceTokenSetEventFilter = TypedEventFilter<SourceTokenSetEvent>;

export interface SourceTokenUnsetEventObject {
  safe: string;
  sourceToken: string;
}
export type SourceTokenUnsetEvent = TypedEvent<
  [string, string],
  SourceTokenUnsetEventObject
>;

export type SourceTokenUnsetEventFilter =
  TypedEventFilter<SourceTokenUnsetEvent>;

export interface AutoswapModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AutoswapModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    desiredTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    executeAutoswap(
      safe: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDesiredToken(
      safe: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { desiredToken: string }>;

    setDesiredToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSourceToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sourceTokens(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    uniswapRouter(overrides?: CallOverrides): Promise<[string]>;

    unsetSourceToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  desiredTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  executeAutoswap(
    safe: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDesiredToken(
    safe: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  setDesiredToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSourceToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sourceTokens(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  uniswapRouter(overrides?: CallOverrides): Promise<string>;

  unsetSourceToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    desiredTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    executeAutoswap(
      safe: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getDesiredToken(
      safe: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setDesiredToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSourceToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sourceTokens(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    uniswapRouter(overrides?: CallOverrides): Promise<string>;

    unsetSourceToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DesiredTokenSet(address,address)"(
      safe?: PromiseOrValue<string> | null,
      desiredToken?: PromiseOrValue<string> | null
    ): DesiredTokenSetEventFilter;
    DesiredTokenSet(
      safe?: PromiseOrValue<string> | null,
      desiredToken?: PromiseOrValue<string> | null
    ): DesiredTokenSetEventFilter;

    "ExecuteAutoswap(address,address,address,uint256)"(
      safe?: PromiseOrValue<string> | null,
      fromToken?: null,
      destToken?: null,
      fromAmount?: null
    ): ExecuteAutoswapEventFilter;
    ExecuteAutoswap(
      safe?: PromiseOrValue<string> | null,
      fromToken?: null,
      destToken?: null,
      fromAmount?: null
    ): ExecuteAutoswapEventFilter;

    "SourceTokenSet(address,address)"(
      safe?: PromiseOrValue<string> | null,
      sourceToken?: PromiseOrValue<string> | null
    ): SourceTokenSetEventFilter;
    SourceTokenSet(
      safe?: PromiseOrValue<string> | null,
      sourceToken?: PromiseOrValue<string> | null
    ): SourceTokenSetEventFilter;

    "SourceTokenUnset(address,address)"(
      safe?: PromiseOrValue<string> | null,
      sourceToken?: PromiseOrValue<string> | null
    ): SourceTokenUnsetEventFilter;
    SourceTokenUnset(
      safe?: PromiseOrValue<string> | null,
      sourceToken?: PromiseOrValue<string> | null
    ): SourceTokenUnsetEventFilter;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    desiredTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeAutoswap(
      safe: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDesiredToken(
      safe: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDesiredToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSourceToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sourceTokens(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniswapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    unsetSourceToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    desiredTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeAutoswap(
      safe: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDesiredToken(
      safe: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDesiredToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSourceToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sourceTokens(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unsetSourceToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
